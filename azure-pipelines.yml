# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main
  
pool:
  vmImage: 'windows-latest'

variables:
  - name: sourceDirectory
    value: source  

  - name:  azureServiceConnection
    value: MCAPS Hybrid

  - name: resourceGroupName
    value: DevOpsSandbox

  - name: templateFile
    value: 'main.bicep'

steps:

- task: DotNetCoreCLI@2
  displayName: 'Restore Function App'
  inputs:
    command: restore
    arguments: '--configuration Release'
    projects: '**\*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Test Function App'
  inputs:
    command: test
    projects: '${{variables.sourceDirectory}}\DevOpsSandbox.Tests\*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish Function App'
  inputs:
    command: publish
    arguments: '--configuration Release --output $(System.DefaultWorkingDirectory)\${{variables.sourceDirectory}}\DevOpsSandbox\publish_output'
    projects: '${{variables.sourceDirectory}}\DevOpsSandbox\*.csproj'
    publishWebProjects: false
    modifyOutputPath: false
    zipAfterPublish: true

- task: CmdLine@2
  displayName: 'Debug'
  inputs: 
    script: 'tree /f'
    
- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'  
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)\${{variables.sourceDirectory}}\DevOpsSandbox\publish_output.zip'
    artifactName: 'drop'

- task: AzureResourceGroupDeployment@2
  displayName: 'Deploy Bicep'  
  inputs:
    azureSubscription: ${{variables.azureServiceConnection}}
    resourceGroupName: ${{variables.resourceGroupName}}
    csmFile: ${{variables.templateFile}}
    deploymentOutputs: deploymentOutput

- task: Powershell@2
  displayName: 'Process deployment output'  
  inputs:
    script: |
      $var=ConvertFrom-Json '$(deploymentOutput)'
      $value=$var.functionName.value

      Write-Output $value
      Write-Host "##vso[task.setvariable variable=functionName;]$value"

- task: AzureFunctionApp@1
  displayName: 'Deploy Function App'  
  inputs:
    azureSubscription: ${{variables.azureServiceConnection}}
    appName: ${{variables.functionName}}
    appType: functionApp
    package: '$(System.DefaultWorkingDirectory)\${{variables.sourceDirectory}}\DevOpsSandbox\publish_output.zip'
    deploymentMethod: zipDeploy

#- task: AzureCLI@2
#  inputs:
#    azureSubscription: ${{variables.azureServiceConnection}}
#    scriptType: ps
#    scriptLocation: inlineScript
#    inlineScript: |
#      az --version
#      az deployment group create --resource-group ${{variables.resourceGroupName}} --template-file ${{variables.templateFile}}
#
#      $var=ConvertFrom-Json '$(functionName)'
#      $value=$var.functionName.value
#
#      Write-Output $value
#      Write-Host "##vso[task.setvariable variable=functionName;]$value"