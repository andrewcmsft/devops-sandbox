# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main
  
pool:
  vmImage: 'windows-latest'

variables:
  - name: sourceDirectory
    value: source  

  - name:  azureServiceConnection
    value: MCAPS Hybrid

  - name: resourceGroupName
    value: DevOpsSandbox

  - name: templateFile
    value: 'main.bicep'

steps:

- task: DotNetCoreCLI@2
  displayName: 'Restore Function App'
  inputs:
    command: restore
    arguments: '--configuration Release'
    projects: '**\*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Test Function App'
  inputs:
    command: test
    projects: '${{variables.sourceDirectory}}\DevOpsSandbox.Tests\*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish Function App'
  inputs:
    command: publish
    arguments: '--configuration Release --output $(System.DefaultWorkingDirectory)\${{variables.sourceDirectory}}\DevOpsSandbox\publish_output'
    projects: '${{variables.sourceDirectory}}\DevOpsSandbox\*.csproj'
    publishWebProjects: false
    modifyOutputPath: false
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)\${{variables.sourceDirectory}}\DevOpsSandbox\publish_output\publish_output.zip'
    artifactName: 'drop'

#
# Deployment via Terraform
#

- task: TerraformInstaller@0
  displayName: 'Terraform - install'
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV3@3
  displayName: 'Terraform - init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'MCAPS Hybrid State'
    backendAzureRmResourceGroupName: 'DevOpsSandboxState'
    backendAzureRmStorageAccountName: 'devopssandboxstate'
    backendAzureRmContainerName: 'state'
    backendAzureRmKey: 'tf/terraform.tfstate'
    workingDirectory: '$(System.DefaultWorkingDirectory)\terraform'

- task: TerraformTaskV3@3
  displayName: 'Terraform - plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-out=terraform.tfplan'
    environmentServiceNameAzureRM: 'MCAPS Hybrid'
    workingDirectory: '$(System.DefaultWorkingDirectory)\terraform'

- task: TerraformTaskV3@3
  displayName: 'Terraform - apply'
  name: 'terraformApply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: 'terraform.tfplan'
    environmentServiceNameAzureRM: 'MCAPS Hybrid'
    workingDirectory: '$(System.DefaultWorkingDirectory)\terraform'

- task: TerraformTaskV3@3
  displayName: 'Terraform - output'
  name: 'terraformOutput'
  inputs:
    provider: 'azurerm'
    command: 'output'
    environmentServiceNameAzureRM: 'MCAPS Hybrid'
    workingDirectory: '$(System.DefaultWorkingDirectory)\terraform'

- task: PowerShell@2
  name: 'terraformProcessing'
  displayName: 'Process terraform output'
  inputs:
    targetType: inline
    script: |
      $terraformProcessing = Get-Content "$(terraformOutput.jsonOutputVariablesPath)" | ConvertFrom-Json
      $terraformProcessing | Get-Member -MemberType NoteProperty | % { $o = $terraformProcessing.($_.Name); 
      Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }

- task: AzureFunctionApp@1
  displayName: 'Deploy Function App'  
  inputs:
    azureSubscription: ${{variables.azureServiceConnection}}
    appName: $(terraformProcessing.function_name)
    appType: functionApp
    package: '$(System.DefaultWorkingDirectory)\${{variables.sourceDirectory}}\DevOpsSandbox\publish_output\publish_output.zip'
    deploymentMethod: zipDeploy

#
# Deployment via Bicep
#

#- task: AzureCLI@2
#  displayName: 'Compile Bicep to ARM'
#  inputs:
#    azureSubscription: ${{variables.azureServiceConnection}}
#    scriptType: ps
#    scriptLocation: inlineScript
#    inlineScript: az bicep build --file main.bicep
#
#- task: AzureResourceGroupDeployment@2
#  displayName: 'Deploy Bicep'  
#  inputs:
#    azureSubscription: ${{variables.azureServiceConnection}}
#    resourceGroupName: ${{variables.resourceGroupName}}
#    csmFile: main.json
#    deploymentOutputs: deploymentOutput
#
#- task: Powershell@2
#  displayName: 'Process deployment output'  
#  inputs:
#    targetType: inline
#    script: |
#      $var=ConvertFrom-Json '$(deploymentOutput)'
#      $value=$var.functionName.value
#
#      Write-Output $value
#      Write-Host "##vso[task.setvariable variable=functionName;]$value"
#
#- task: AzureFunctionApp@1
#  displayName: 'Deploy Function App'  
#  inputs:
#    azureSubscription: ${{variables.azureServiceConnection}}
#    appName: $(functionName)
#    appType: functionApp
#    package: '$(System.DefaultWorkingDirectory)\${{variables.sourceDirectory}}\DevOpsSandbox\publish_output\publish_output.zip'
#    deploymentMethod: zipDeploy